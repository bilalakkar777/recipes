/**
 * @fileoverview added by tsickle
 * Generated from: lib/lazy-image/lazy-image.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FivGalleryImage } from '../gallery/gallery-image/gallery-image.component';
import { Directive, Input, EventEmitter, Output, Host, Self, Optional, ElementRef } from '@angular/core';
var FivLazyImage = /** @class */ (function () {
    function FivLazyImage(fivImage, image) {
        this.fivImage = fivImage;
        this.image = image;
        this.virtual = false;
        this.inViewport = false;
        this.willShow = new EventEmitter();
        this.willHide = new EventEmitter();
    }
    /**
     * @return {?}
     */
    FivLazyImage.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var io = new IntersectionObserver((/**
         * @param {?} entries
         * @param {?} observer
         * @return {?}
         */
        function (entries, observer) {
            entries.forEach((/**
             * @param {?} entry
             * @return {?}
             */
            function (entry) {
                if (entry.isIntersecting) {
                    if (!_this.inViewport) {
                        _this.handleIntersection();
                        if (!_this.virtual) {
                            io.disconnect();
                        }
                    }
                }
                else {
                    if (_this.inViewport) {
                        _this.inViewport = false;
                        if (_this.fivImage) {
                            _this.willHide.emit(_this.fivImage);
                        }
                        else {
                            _this.willHide.emit(_this.image.nativeElement);
                        }
                    }
                }
            }));
        }));
        io['POLL_INTERVAL'] = 100;
        if (this.fivImage) {
            io.observe(this.fivImage.thumbnail.nativeElement);
        }
        else {
            io.observe(this.image.nativeElement);
        }
    };
    /**
     * @return {?}
     */
    FivLazyImage.prototype.handleIntersection = /**
     * @return {?}
     */
    function () {
        this.inViewport = true;
        if (this.fivLazyImage) {
            if (this.fivImage) {
                this.fivImage.src = this.fivLazyImage;
                this.willShow.emit(this.fivImage);
            }
            else {
                this.image.nativeElement.src = this.fivLazyImage;
                this.willShow.emit(this.image.nativeElement);
            }
        }
        else {
            this.willShow.emit(this.fivImage || this.image.nativeElement);
        }
    };
    FivLazyImage.decorators = [
        { type: Directive, args: [{
                    selector: '[fivLazyImage]'
                },] }
    ];
    /** @nocollapse */
    FivLazyImage.ctorParameters = function () { return [
        { type: FivGalleryImage, decorators: [{ type: Host }, { type: Self }, { type: Optional }] },
        { type: ElementRef }
    ]; };
    FivLazyImage.propDecorators = {
        fivLazyImage: [{ type: Input }],
        virtual: [{ type: Input }],
        willShow: [{ type: Output }],
        willHide: [{ type: Output }]
    };
    return FivLazyImage;
}());
export { FivLazyImage };
if (false) {
    /** @type {?} */
    FivLazyImage.prototype.fivLazyImage;
    /** @type {?} */
    FivLazyImage.prototype.virtual;
    /** @type {?} */
    FivLazyImage.prototype.inViewport;
    /** @type {?} */
    FivLazyImage.prototype.willShow;
    /** @type {?} */
    FivLazyImage.prototype.willHide;
    /** @type {?} */
    FivLazyImage.prototype.fivImage;
    /** @type {?} */
    FivLazyImage.prototype.image;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1pbWFnZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZml2ZXRocmVlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvbGF6eS1pbWFnZS9sYXp5LWltYWdlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUNuRixPQUFPLEVBQ0wsU0FBUyxFQUVULEtBQUssRUFDTCxZQUFZLEVBQ1osTUFBTSxFQUNOLElBQUksRUFDSixJQUFJLEVBQ0osUUFBUSxFQUNSLFVBQVUsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUV2QjtJQVVFLHNCQUNxQyxRQUF5QixFQUNyRCxLQUFpQjtRQURXLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQ3JELFVBQUssR0FBTCxLQUFLLENBQVk7UUFQakIsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUN6QixlQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ1QsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFzQyxDQUFDO1FBQ2xFLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBc0MsQ0FBQztJQUt6RSxDQUFDOzs7O0lBRUosK0JBQVE7OztJQUFSO1FBQUEsaUJBNEJDOztZQTNCTyxFQUFFLEdBQUcsSUFBSSxvQkFBb0I7Ozs7O1FBQUMsVUFBQyxPQUFPLEVBQUUsUUFBUTtZQUNwRCxPQUFPLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsS0FBSztnQkFDbkIsSUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFO29CQUN4QixJQUFJLENBQUMsS0FBSSxDQUFDLFVBQVUsRUFBRTt3QkFDcEIsS0FBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7d0JBQzFCLElBQUksQ0FBQyxLQUFJLENBQUMsT0FBTyxFQUFFOzRCQUNqQixFQUFFLENBQUMsVUFBVSxFQUFFLENBQUM7eUJBQ2pCO3FCQUNGO2lCQUNGO3FCQUFNO29CQUNMLElBQUksS0FBSSxDQUFDLFVBQVUsRUFBRTt3QkFDbkIsS0FBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7d0JBQ3hCLElBQUksS0FBSSxDQUFDLFFBQVEsRUFBRTs0QkFDakIsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3lCQUNuQzs2QkFBTTs0QkFDTCxLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO3lCQUM5QztxQkFDRjtpQkFDRjtZQUNILENBQUMsRUFBQyxDQUFDO1FBQ0wsQ0FBQyxFQUFDO1FBQ0YsRUFBRSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUMxQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNuRDthQUFNO1lBQ0wsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3RDO0lBQ0gsQ0FBQzs7OztJQUNELHlDQUFrQjs7O0lBQWxCO1FBQ0UsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztnQkFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ25DO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO2dCQUNqRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQzlDO1NBQ0Y7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMvRDtJQUNILENBQUM7O2dCQXpERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtpQkFDM0I7Ozs7Z0JBZlEsZUFBZSx1QkF3Qm5CLElBQUksWUFBSSxJQUFJLFlBQUksUUFBUTtnQkFkM0IsVUFBVTs7OytCQU9ULEtBQUs7MEJBQ0wsS0FBSzsyQkFFTCxNQUFNOzJCQUNOLE1BQU07O0lBa0RULG1CQUFDO0NBQUEsQUExREQsSUEwREM7U0F2RFksWUFBWTs7O0lBQ3ZCLG9DQUE4Qjs7SUFDOUIsK0JBQXlCOztJQUN6QixrQ0FBbUI7O0lBQ25CLGdDQUE0RTs7SUFDNUUsZ0NBQTRFOztJQUcxRSxnQ0FBNEQ7O0lBQzVELDZCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZpdkdhbGxlcnlJbWFnZSB9IGZyb20gJy4uL2dhbGxlcnkvZ2FsbGVyeS1pbWFnZS9nYWxsZXJ5LWltYWdlLmNvbXBvbmVudCc7XG5pbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIE9uSW5pdCxcbiAgSW5wdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgT3V0cHV0LFxuICBIb3N0LFxuICBTZWxmLFxuICBPcHRpb25hbCxcbiAgRWxlbWVudFJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2ZpdkxhenlJbWFnZV0nXG59KVxuZXhwb3J0IGNsYXNzIEZpdkxhenlJbWFnZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGZpdkxhenlJbWFnZTogc3RyaW5nO1xuICBASW5wdXQoKSB2aXJ0dWFsID0gZmFsc2U7XG4gIGluVmlld3BvcnQgPSBmYWxzZTtcbiAgQE91dHB1dCgpIHdpbGxTaG93ID0gbmV3IEV2ZW50RW1pdHRlcjxGaXZHYWxsZXJ5SW1hZ2UgfCBIVE1MSW1hZ2VFbGVtZW50PigpO1xuICBAT3V0cHV0KCkgd2lsbEhpZGUgPSBuZXcgRXZlbnRFbWl0dGVyPEZpdkdhbGxlcnlJbWFnZSB8IEhUTUxJbWFnZUVsZW1lbnQ+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEhvc3QoKSBAU2VsZigpIEBPcHRpb25hbCgpIHB1YmxpYyBmaXZJbWFnZTogRml2R2FsbGVyeUltYWdlLFxuICAgIHB1YmxpYyBpbWFnZTogRWxlbWVudFJlZlxuICApIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgY29uc3QgaW8gPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMsIG9ic2VydmVyKSA9PiB7XG4gICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuaW5WaWV3cG9ydCkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVJbnRlcnNlY3Rpb24oKTtcbiAgICAgICAgICAgIGlmICghdGhpcy52aXJ0dWFsKSB7XG4gICAgICAgICAgICAgIGlvLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMuaW5WaWV3cG9ydCkge1xuICAgICAgICAgICAgdGhpcy5pblZpZXdwb3J0ID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5maXZJbWFnZSkge1xuICAgICAgICAgICAgICB0aGlzLndpbGxIaWRlLmVtaXQodGhpcy5maXZJbWFnZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLndpbGxIaWRlLmVtaXQodGhpcy5pbWFnZS5uYXRpdmVFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlvWydQT0xMX0lOVEVSVkFMJ10gPSAxMDA7XG4gICAgaWYgKHRoaXMuZml2SW1hZ2UpIHtcbiAgICAgIGlvLm9ic2VydmUodGhpcy5maXZJbWFnZS50aHVtYm5haWwubmF0aXZlRWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlvLm9ic2VydmUodGhpcy5pbWFnZS5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG4gIH1cbiAgaGFuZGxlSW50ZXJzZWN0aW9uKCkge1xuICAgIHRoaXMuaW5WaWV3cG9ydCA9IHRydWU7XG4gICAgaWYgKHRoaXMuZml2TGF6eUltYWdlKSB7XG4gICAgICBpZiAodGhpcy5maXZJbWFnZSkge1xuICAgICAgICB0aGlzLmZpdkltYWdlLnNyYyA9IHRoaXMuZml2TGF6eUltYWdlO1xuICAgICAgICB0aGlzLndpbGxTaG93LmVtaXQodGhpcy5maXZJbWFnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmltYWdlLm5hdGl2ZUVsZW1lbnQuc3JjID0gdGhpcy5maXZMYXp5SW1hZ2U7XG4gICAgICAgIHRoaXMud2lsbFNob3cuZW1pdCh0aGlzLmltYWdlLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndpbGxTaG93LmVtaXQodGhpcy5maXZJbWFnZSB8fCB0aGlzLmltYWdlLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cbiAgfVxufVxuIl19