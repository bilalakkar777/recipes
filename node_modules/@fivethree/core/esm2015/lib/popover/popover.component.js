/**
 * @fileoverview added by tsickle
 * Generated from: lib/popover/popover.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { animIn, animOut } from './popover.animations';
import { DomSanitizer } from '@angular/platform-browser';
import { Component, ViewChild, Input, ViewEncapsulation, Host, Optional, ElementRef } from '@angular/core';
import { FivOverlay } from '../overlay/overlay.component';
import { Platform, IonContent } from '@ionic/angular';
import { fromEvent, Subject, merge, from } from 'rxjs';
import { tap, takeUntil, map, throttleTime, filter, flatMap } from 'rxjs/operators';
import { NavigationStart, Router } from '@angular/router';
import { after } from '@fivethree/ngx-rxjs-animations';
export class FivPopover {
    /**
     * @param {?} platform
     * @param {?} content
     * @param {?} dom
     * @param {?} router
     */
    constructor(platform, content, dom, router) {
        this.platform = platform;
        this.content = content;
        this.dom = dom;
        this.router = router;
        this.arrow = false;
        this.arrowWidth = 24;
        this.arrowHeight = this.arrowWidth / 1.6;
        this.arrowPosition = 'auto';
        this.backdrop = true;
        this.overlaysTarget = true;
        this.closeOnNavigation = true;
        this.scrollToTarget = false;
        this.scrollSpeed = 100;
        this.position = 'auto';
        this.classes = [];
        this.hidden = false;
        this.onDestroy$ = new Subject();
        this.onClose$ = new Subject();
        this.inDuration = 200;
        this.outDuration = 80;
        this.animationIn = (/**
         * @param {?} element
         * @return {?}
         */
        (element) => animIn(element, this._position, this.inDuration));
        this.animationOut = (/**
         * @param {?} element
         * @return {?}
         */
        (element) => animOut(element, this.outDuration));
    }
    /**
     * @return {?}
     */
    get styles() {
        if (!this._position) {
            return;
        }
        return this.dom.bypassSecurityTrustStyle(` width: ${this.width ? this.width + 'px' : 'auto'}; 
        height: ${this.height ? this.height + 'px' : 'auto'}; 
        left: ${this.getContainerLeft()}px; 
        top: ${this.getContainerTop()}px;`);
    }
    /**
     * @return {?}
     */
    get triangle() {
        /** @type {?} */
        const isHorizontal = ['left', 'right'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        if (isHorizontal) {
            return `${this.arrowHeight},0 0,${this.arrowWidth / 2} ${this.arrowHeight},${this.arrowWidth}`;
        }
        return `0,${this.arrowHeight} ${this.arrowWidth / 2},0 ${this.arrowWidth},${this.arrowHeight}`;
    }
    /**
     * @return {?}
     */
    get svgStyles() {
        if (!this._position) {
            return;
        }
        /** @type {?} */
        const isHorizontal = ['left', 'right'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        /** @type {?} */
        const rotate = (this.position === 'auto' && this._position.vertical === 'bottom') ||
            this.position === 'left';
        return this.dom.bypassSecurityTrustStyle(`height: ${isHorizontal ? this.arrowWidth : this.arrowHeight}px; 
      width: ${isHorizontal ? this.arrowHeight : this.arrowWidth}px; 
      top: ${this.getArrowTop()}px; 
      left: ${this.getArrowLeft()}px;
      transform: rotateZ(${rotate ? 180 : 0}deg);`);
    }
    /**
     * @return {?}
     */
    get animationStyles() {
        if (!this._position) {
            return;
        }
        return this.dom.bypassSecurityTrustStyle(`height: ${this.arrowHeight}px; 
      width: ${this.arrowWidth}px; 
      top: ${this.getArrowTop()}px; 
      left: ${this.getArrowLeft()}px;
      transform: rotateZ(${this._position.vertical === 'bottom' ? 180 : 0}deg);`);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.router.events
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        event => event instanceof NavigationStart)), filter((/**
         * @return {?}
         */
        () => this.closeOnNavigation && this.overlay.open)), tap((/**
         * @return {?}
         */
        () => this.close())), takeUntil(this.onDestroy$))
            .subscribe();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() { }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next();
    }
    /**
     * @return {?}
     */
    close() {
        this.animationOut(this.animationContainer)
            .pipe(after((/**
         * @return {?}
         */
        () => {
            this.overlay.hide();
            this.onClose$.next();
        })))
            .subscribe();
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    getPositionOfTarget(target) {
        /** @type {?} */
        const rect = target.getBoundingClientRect();
        return this.calculcatePositioning(rect.top, rect.left, rect.bottom, rect.right, rect.height, rect.width);
    }
    /**
     * @param {?} target
     * @return {?}
     */
    open(target) {
        /** @type {?} */
        let element;
        if (target instanceof MouseEvent) {
            element = (/** @type {?} */ (target.target));
        }
        else if (target instanceof ElementRef) {
            element = (/** @type {?} */ (target.nativeElement));
        }
        else {
            return;
        }
        this.openTarget(element);
    }
    /**
     * @param {?} target
     * @return {?}
     */
    openTarget(target) {
        /** @type {?} */
        const position = this.getPositionOfTarget(target);
        this.openAtPosition(target, position);
        this.watchResize(target);
        this.watchScroll(target);
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    watchResize(target) {
        fromEvent(window, 'resize')
            .pipe(flatMap((/**
         * @return {?}
         */
        () => this.filterInViewport(target))), throttleTime(50), map((/**
         * @return {?}
         */
        () => this.getPositionOfTarget(target))), tap((/**
         * @param {?} pos
         * @return {?}
         */
        pos => (this._position = pos))), takeUntil(this.onDestroy$))
            .subscribe();
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    watchScroll(target) {
        if (this.content && !this.backdrop) {
            this.content.scrollEvents = true;
            merge(fromEvent(window, 'mousewheel'), fromEvent(window, 'touchmove'), this.content.ionScroll)
                .pipe(flatMap((/**
             * @return {?}
             */
            () => this.filterInViewport(target))), map((/**
             * @return {?}
             */
            () => this.getPositionOfTarget(target))), tap((/**
             * @param {?} pos
             * @return {?}
             */
            pos => (this._position = pos))), takeUntil(this.onDestroy$))
                .subscribe();
        }
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    filterInViewport(target) {
        return from(this.inViewport(target.getBoundingClientRect())).pipe(tap((/**
         * @param {?} inViewport
         * @return {?}
         */
        inViewport => !inViewport ? (this.hidden = true) : (this.hidden = false))), filter((/**
         * @param {?} inViewPort
         * @return {?}
         */
        inViewPort => this.overlay.open && inViewPort)));
    }
    /**
     * @private
     * @param {?} target
     * @param {?} position
     * @return {?}
     */
    openAtPosition(target, position) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.scrollToPosition(target, position);
            this._position = position;
            this.overlay.show();
        });
    }
    /**
     * @private
     * @param {?} target
     * @param {?} position
     * @return {?}
     */
    scrollToPosition(target, position) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.content && this.scrollToTarget) {
                /** @type {?} */
                const isInViewport = yield this.inViewport(target.getBoundingClientRect());
                if (isInViewport) {
                    return;
                }
                yield this.content.scrollToPoint(position.left, position.top, this.scrollSpeed);
            }
        });
    }
    /**
     * @param {?} position
     * @return {?}
     */
    inViewport(position) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const height = this.platform.height();
            /** @type {?} */
            const width = this.platform.width();
            return (position.top <= height &&
                position.bottom >= 0 &&
                position.left < width &&
                position.right > 0);
        });
    }
    /**
     * @private
     * @param {?} top
     * @param {?} left
     * @param {?} bottom
     * @param {?} right
     * @param {?} targetHeight
     * @param {?} targetWidth
     * @return {?}
     */
    calculcatePositioning(top, left, bottom, right, targetHeight, targetWidth) {
        // calculates the position of the popover without considering arrow and overlay offset
        /** @type {?} */
        const width = this.platform.width();
        /** @type {?} */
        const height = this.platform.height();
        /** @type {?} */
        const _left = this.position === 'right' ||
            (width / 2 > left && this.position !== 'left');
        /** @type {?} */
        const _right = this.position === 'left' ||
            (width / 2 <= left && this.position !== 'right');
        /** @type {?} */
        const _top = this.position === 'below' ||
            (height / 2 > top && this.position !== 'above');
        /** @type {?} */
        const _bottom = this.position === 'above' ||
            (height / 2 <= top && this.position !== 'below');
        // transform origin
        /** @type {?} */
        let horizontal = 'left';
        /** @type {?} */
        let vertical = 'top';
        if (_left && _top) {
            // top left
            horizontal = 'left';
            vertical = 'top';
        }
        else if (_right && _bottom) {
            // bottom right
            left = right - this.width;
            top = bottom - this.height;
            horizontal = 'right';
            vertical = 'bottom';
        }
        else if (_right && _top) {
            // top right
            left = right - this.width;
            horizontal = 'right';
            vertical = 'top';
        }
        else if (_left && _bottom) {
            // bottom left
            top = bottom - this.height;
            horizontal = 'left';
            vertical = 'bottom';
        }
        return {
            top,
            left,
            bottom,
            right,
            targetHeight,
            targetWidth,
            horizontal,
            vertical
        };
    }
    /**
     * @private
     * @return {?}
     */
    getArrowTop() {
        /** @type {?} */
        const isVert = ['auto', 'below', 'above'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        if (isVert) {
            return this._position.vertical === 'top'
                ? -1 * this.arrowHeight
                : this.height;
        }
        if (this.arrowPosition === 'center') {
            return this.height / 2 - this.arrowWidth / 2;
        }
        return this._position.vertical === 'top'
            ? this._position.targetHeight / 2 - this.arrowHeight / 2
            : this.height - this.arrowHeight / 2 - this._position.targetHeight / 2;
    }
    /**
     * @private
     * @return {?}
     */
    getArrowLeft() {
        /** @type {?} */
        const isHorizontal = ['left', 'right'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        if (isHorizontal) {
            return this._position.horizontal === 'left'
                ? -1 * this.arrowHeight
                : this.width;
        }
        if (this.arrowPosition === 'center') {
            return this.width / 2 - this.arrowHeight / 2;
        }
        return this._position.horizontal === 'left'
            ? this._position.targetWidth / 2 - this.arrowWidth / 2
            : this.width - this.arrowWidth / 2 - this._position.targetWidth / 2;
    }
    /**
     * @private
     * @return {?}
     */
    getContainerTop() {
        /** @type {?} */
        const isVert = ['auto', 'below', 'above'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        /** @type {?} */
        const isTop = this._position.vertical === 'top';
        /** @type {?} */
        let offset = 0;
        if (this.arrow && isTop) {
            offset -= this.getVerticalArrowOffset();
        }
        else if (this.arrow && !isTop) {
            offset += this.getVerticalArrowOffset();
        }
        if (!isVert) {
            return this._position.top + offset;
        }
        if (!this.overlaysTarget && isTop) {
            offset += this._position.targetHeight;
        }
        else if (!this.overlaysTarget && !isTop) {
            offset -= this._position.targetHeight;
        }
        if (this.arrow && isTop) {
            offset += this.arrowHeight;
        }
        else if (this.arrow && !isTop) {
            offset -= this.arrowHeight;
        }
        return this._position.top + offset;
    }
    /**
     * @private
     * @return {?}
     */
    getVerticalArrowOffset() {
        /** @type {?} */
        let offset = 0;
        /** @type {?} */
        const isHorizontal = ['left', 'right'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        if (this.arrowPosition === 'center' && isHorizontal) {
            offset += this.height / 2 - this._position.targetHeight / 2;
        }
        return offset;
    }
    /**
     * @private
     * @return {?}
     */
    getHorizontalArrowOffset() {
        /** @type {?} */
        let offset = 0;
        /** @type {?} */
        const isVertical = ['above', 'auto', 'below'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        if (this.arrowPosition === 'center' && isVertical) {
            offset += this.width / 2 - this._position.targetWidth / 2;
        }
        return offset;
    }
    /**
     * @private
     * @return {?}
     */
    getContainerLeft() {
        /** @type {?} */
        const isHorizontal = ['left', 'right'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        /** @type {?} */
        const isLeft = this._position.horizontal === 'left';
        /** @type {?} */
        let offset = 0;
        if (this.arrow && isLeft) {
            offset -= this.getHorizontalArrowOffset();
        }
        else if (this.arrow && !isLeft) {
            offset += this.getHorizontalArrowOffset();
        }
        if (!isHorizontal) {
            return this._position.left + offset;
        }
        if (!this.overlaysTarget && isLeft) {
            offset += this._position.targetWidth;
        }
        else if (!this.overlaysTarget && !isLeft) {
            offset -= this._position.targetWidth;
        }
        if (this.arrow && isLeft) {
            offset += this.arrowHeight;
        }
        else if (this.arrow && !isLeft) {
            offset -= this.arrowHeight;
        }
        return this._position.left + offset;
    }
}
FivPopover.decorators = [
    { type: Component, args: [{
                selector: 'fiv-popover',
                template: "<fiv-overlay>\n  <div *ngIf=\"backdrop && !hidden\" [ngClass]=\"classes\" class=\"fiv-popover-backdrop\" (click)=\"close()\">\n  </div>\n  <div *ngIf=\"!hidden\" [ngClass]=\"classes\" class=\"popover-container\" [style]=\"styles\">\n    <div #animation *ngIf=\"overlay?.open\" class=\"animation-container\" anim [anim.in]=\"animationIn\">\n      <ng-content>\n      </ng-content>\n      <svg *ngIf=\"arrow && !overlaysTarget\" class=\"arrow\" [style]=\"svgStyles\">\n        <polygon [attr.points]=\"triangle\" />\n      </svg>\n    </div>\n\n  </div>\n\n</fiv-overlay>",
                encapsulation: ViewEncapsulation.None,
                styles: [":host{--fiv-popover-backdrop-color:rgba(0, 0, 0, 0.2)}.popover-container{position:absolute;display:block}.animation-container{height:100%;position:relative}svg.arrow{position:absolute;fill:var(--ion-item-background)}.fiv-popover-backdrop{position:absolute;display:block;width:100vw;height:100vh;background:var(--fiv-popover-backdrop-color)}"]
            }] }
];
/** @nocollapse */
FivPopover.ctorParameters = () => [
    { type: Platform },
    { type: IonContent, decorators: [{ type: Host }, { type: Optional }] },
    { type: DomSanitizer },
    { type: Router }
];
FivPopover.propDecorators = {
    overlay: [{ type: ViewChild, args: [FivOverlay, { static: false },] }],
    animationContainer: [{ type: ViewChild, args: ['animation', { static: false },] }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    arrow: [{ type: Input }],
    arrowWidth: [{ type: Input }],
    arrowHeight: [{ type: Input }],
    arrowPosition: [{ type: Input }],
    backdrop: [{ type: Input }],
    overlaysTarget: [{ type: Input }],
    closeOnNavigation: [{ type: Input }],
    scrollToTarget: [{ type: Input }],
    scrollSpeed: [{ type: Input }],
    position: [{ type: Input }],
    classes: [{ type: Input }],
    inDuration: [{ type: Input }],
    outDuration: [{ type: Input }],
    animationIn: [{ type: Input }],
    animationOut: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivPopover.prototype.overlay;
    /** @type {?} */
    FivPopover.prototype.animationContainer;
    /** @type {?} */
    FivPopover.prototype.width;
    /** @type {?} */
    FivPopover.prototype.height;
    /** @type {?} */
    FivPopover.prototype.arrow;
    /** @type {?} */
    FivPopover.prototype.arrowWidth;
    /** @type {?} */
    FivPopover.prototype.arrowHeight;
    /** @type {?} */
    FivPopover.prototype.arrowPosition;
    /** @type {?} */
    FivPopover.prototype.backdrop;
    /** @type {?} */
    FivPopover.prototype.overlaysTarget;
    /** @type {?} */
    FivPopover.prototype.closeOnNavigation;
    /** @type {?} */
    FivPopover.prototype.scrollToTarget;
    /** @type {?} */
    FivPopover.prototype.scrollSpeed;
    /** @type {?} */
    FivPopover.prototype.position;
    /** @type {?} */
    FivPopover.prototype.classes;
    /** @type {?} */
    FivPopover.prototype._position;
    /** @type {?} */
    FivPopover.prototype.hidden;
    /** @type {?} */
    FivPopover.prototype.onDestroy$;
    /** @type {?} */
    FivPopover.prototype.onClose$;
    /** @type {?} */
    FivPopover.prototype.inDuration;
    /** @type {?} */
    FivPopover.prototype.outDuration;
    /** @type {?} */
    FivPopover.prototype.animationIn;
    /** @type {?} */
    FivPopover.prototype.animationOut;
    /**
     * @type {?}
     * @private
     */
    FivPopover.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    FivPopover.prototype.content;
    /**
     * @type {?}
     * @private
     */
    FivPopover.prototype.dom;
    /**
     * @type {?}
     * @private
     */
    FivPopover.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,